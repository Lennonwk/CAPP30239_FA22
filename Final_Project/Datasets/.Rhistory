lm <- lm(profits_2016 ~ fiona_farmer + profits_2005 + crop_lentils +
crop_wheat + crop_rice + crop_cotton,  data = data)
### Report LM
lm %>%
tidy() %>%
kable(caption = "Regression Output",
col.names = c("Predictor", "Beta", "SE", "t", "p"),
booktabs = TRUE) %>%
kable_styling(latex_options = "HOLD_position")
lm <- lm(profits_2016 ~ fiona_farmer + profits_2005 + crop_lentils +
crop_wheat + crop_cotton + crop_rice ,  data = data)
### Report LM
lm %>%
tidy() %>%
kable(caption = "Regression Output",
col.names = c("Predictor", "Beta", "SE", "t", "p"),
booktabs = TRUE) %>%
kable_styling(latex_options = "HOLD_position")
lm <- lm(profits_2016 ~ fiona_farmer + profits_2005 + crop_lentils +
crop_wheat + crop_cotton + crop_rice   data = data)
lm <- lm(profits_2016 ~ fiona_farmer + profits_2005 + crop_lentils +
crop_wheat + crop_cotton + crop_rice,   data = data)
### Report LM
lm %>%
tidy() %>%
kable(caption = "Regression Output",
col.names = c("Predictor", "Beta", "SE", "t", "p"),
booktabs = TRUE) %>%
kable_styling(latex_options = "HOLD_position")
### Report LM
lm %>%
tidy() %>%
kable(caption = "Regression Output",
col.names = c("Predictor", "Beta", "SE", "t", "p"),
booktabs = FALSE) %>%
kable_styling(latex_options = "HOLD_position")
lm <- lm(profits_2016 ~ fiona_farmer + profits_2005 + crop_lentils +
crop_wheat + crop_cotton,   data = data)
### Report LM
lm %>%
tidy() %>%
kable(caption = "Regression Output",
col.names = c("Predictor", "Beta", "SE", "t", "p"),
booktabs = FALSE) %>%
kable_styling(latex_options = "HOLD_position")
### Report LM
lm %>%
tidy() %>%
kable(caption = "Regression Output",
col.names = c("Predictor", "Beta", "SE", "t", "p"),
booktabs = FALSE) %>%
kable_styling(latex_options = "HOLD_position")
lm <- lm(profits_2016 ~ fiona_farmer + profits_2005 + crop_lentils +
crop_wheat + crop_cotton + crop_rice,   data = data)
### Report LM
lm %>%
tidy() %>%
kable(caption = "Regression Output",
col.names = c("Predictor", "Beta", "SE", "t", "p"),
booktabs = FALSE) %>%
kable_styling(latex_options = "HOLD_position")
Y_treated_avg  = mean(data$profits_2016 [data$fiona_farmer==1])
Y_untreated_avg  = mean(data$profits_2016 [data$fiona_farmer==0])
naive_estimator = Y_treated_avg - Y_untreated_avg
naive_estimator
library(tidyverse)
library(knitr)
library(readr)
library(stargazer)
library(MatchIt)
library(broom)      # tidy function: statistical outputs into tibbles
library(kableExtra) # make-up tables
data<-read.csv("ps2_data.csv")
data$farmer_birth_year[data$farmer_birth_year == 'nineteen seventy-three'] <- '1973'
data$farmer_birth_year[data$farmer_birth_year == 'nineteen seventy-two'] <- '1972'
data$farmer_birth_year <- as.numeric(data$farmer_birth_year)
data$crop_lentils <- ifelse(data$crop=='LENTILS',1,0)
data$crop_wheat <- ifelse(data$crop=='WHEAT',1,0)
data$crop_rice <- ifelse(data$crop=='RICE',1,0)
data$crop_cotton <- ifelse(data$crop=='COTTON',1,0)
data$district_KARUR <- ifelse(data$district=='KARUR',1,0)
data$district_TENKASI <- ifelse(data$district=='TENKASI',1,0)
data$district_MADURAI <- ifelse(data$district=='MADURAI',1,0)
data$district_PUDUKKOTTAI <- ifelse(data$district=='PUDUKKOTTAI',1,0)
data$district_THANJAVUR <- ifelse(data$district=='THANJAVUR',1,0)
data$district_DINDIGUL <- ifelse(data$district=='DINDIGUL',1,0)
regressions <- data %>%
select("farmer_birth_year",
"fertilizer_use",
"profits_2005",
"crop_lentils",
"crop_wheat",
"crop_rice",
"crop_cotton",
"district_KARUR",
"district_TENKASI",
"district_MADURAI",
"district_PUDUKKOTTAI",
"district_THANJAVUR",
"district_DINDIGUL") %>%
lapply(function(x) lm(x ~ fiona_farmer, data = data))
balance_table <- regressions %>%
sapply(function(x) coef(summary(x))[c(2,8)]) %>%
t()
balance_table %>%
kable(col.names = c("Differences in means", "p-value")) %>%
kable_styling(position = "center", font_size = 8.5, latex_options = "hold_position")
#summary(df_data_lab)
lm <- lm(profits_2016 ~ fiona_farmer + profits_2005 + crop_lentils +
crop_wheat + crop_cotton + crop_rice,   data = data)
### Report LM
lm %>%
tidy() %>%
kable(caption = "Regression Output",
col.names = c("Predictor", "Beta", "SE", "t", "p"),
booktabs = FALSE) %>%
kable_styling(latex_options = "HOLD_position")
Y_treated_avg  = mean(data$profits_2016 [data$fiona_farmer==1])
Y_untreated_avg  = mean(data$profits_2016 [data$fiona_farmer==0])
naive_estimator = Y_treated_avg - Y_untreated_avg
naive_estimator
#card_cov <- c('lwage', 'age', 'IQ')
data_cov <- c('profits_2016', 'farmer_birth_year', 'fertilizer_use', 'profits_2005', 'crop_lentils', 'crop_wheat', 'crop_rice', 'crop_cotton',
'district_KARUR', 'district_TENKASI', 'district_MADURAI', 'district_PUDUKKOTTAI', 'district_THANJAVUR', 'district_DINDIGUL')
# Second, we use the exact method to match the data
##data_naomit <-  %>%  # MatchIt does not allow missing values (drops missing values)
##  select(lwage, college, one_of(card_cov)) %>% na.omit()
mod_match <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat, #formula: treat ~ x1+x2+...(background variables)
estimand="ATE",
method = "exact", # set the matching method you want to use
data = data)
df_mATE <- match.data(mod_match)
mod_match <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat, #formula: treat ~ x1+x2+...(background variables)
estimand="ATT",
method = "exact", # set the matching method you want to use
data = data)
df_mATT <- match.data(mod_match)
mod_match
#df_m
# Do the balance test on the two groups
#df_m %>%
#  group_by(fiona_farmer) %>%
#  select(one_of(data_cov)) %>%
#  summarise_all(funs(mean(., na.rm = T)))
# To do the balance more formally using regressions
#summary(lm(farmer_birth_year~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
#card_cov <- c('lwage', 'age', 'IQ')
data_cov <- c('profits_2016', 'farmer_birth_year', 'fertilizer_use', 'profits_2005', 'crop_lentils', 'crop_wheat', 'crop_rice', 'crop_cotton',
'district_KARUR', 'district_TENKASI', 'district_MADURAI', 'district_PUDUKKOTTAI', 'district_THANJAVUR', 'district_DINDIGUL')
# Second, we use the exact method to match the data
##data_naomit <-  %>%  # MatchIt does not allow missing values (drops missing values)
##  select(lwage, college, one_of(card_cov)) %>% na.omit()
mod_match <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat, #formula: treat ~ x1+x2+...(background variables)
estimand="ATE",
method = "exact", # set the matching method you want to use
data = data)
df_mATE <- match.data(mod_match)
mod_match <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat, #formula: treat ~ x1+x2+...(background variables)
estimand="ATT",
method = "exact", # set the matching method you want to use
data = data)
df_mATT <- match.data(mod_match)
#summary(m.out, un = FALSE)
summary(mod_match, un = FALSE)
#df_m
# Do the balance test on the two groups
#df_m %>%
#  group_by(fiona_farmer) %>%
#  select(one_of(data_cov)) %>%
#  summarise_all(funs(mean(., na.rm = T)))
# To do the balance more formally using regressions
#summary(lm(farmer_birth_year~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
library(tidyverse)
library(knitr)
library(readr)
library(stargazer)
library(MatchIt)
library(broom)      # tidy function: statistical outputs into tibbles
library(kableExtra) # make-up tables
library(lmtest)
library(sandwich)
library(tidyverse)
library(knitr)
library(readr)
library(stargazer)
library(MatchIt)
library(broom)      # tidy function: statistical outputs into tibbles
library(kableExtra) # make-up tables
library(lmtest)
library(sandwich)
#card_cov <- c('lwage', 'age', 'IQ')
data_cov <- c('profits_2016', 'farmer_birth_year', 'fertilizer_use', 'profits_2005', 'crop_lentils', 'crop_wheat', 'crop_rice', 'crop_cotton',
'district_KARUR', 'district_TENKASI', 'district_MADURAI', 'district_PUDUKKOTTAI', 'district_THANJAVUR', 'district_DINDIGUL')
# Second, we use the exact method to match the data
##data_naomit <-  %>%  # MatchIt does not allow missing values (drops missing values)
##  select(lwage, college, one_of(card_cov)) %>% na.omit()
mod_match <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat, #formula: treat ~ x1+x2+...(background variables)
estimand="ATE",
method = "exact", # set the matching method you want to use
data = data)
df_mATE <- match.data(mod_match)
mod_match <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat, #formula: treat ~ x1+x2+...(background variables)
estimand="ATT",
method = "exact", # set the matching method you want to use
data = data)
df_mATT <- match.data(mod_match)
#summary(m.out, un = FALSE)
summary(mod_match, un = FALSE)
#df_m
# Do the balance test on the two groups
#df_m %>%
#  group_by(fiona_farmer) %>%
#  select(one_of(data_cov)) %>%
#  summarise_all(funs(mean(., na.rm = T)))
# To do the balance more formally using regressions
#summary(lm(farmer_birth_year~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
###
library("lmtest")
library("sandwich")
md <- match.data(mod_match)
fit <- lm(profits_2016 ~ fiona_farmer, data = md, weights = weights)
coeftest(fit, vcov. = vcovCL, cluster = ~subclass)
#card_cov <- c('lwage', 'age', 'IQ')
data_cov <- c('profits_2016', 'farmer_birth_year', 'fertilizer_use', 'profits_2005', 'crop_lentils', 'crop_wheat', 'crop_rice', 'crop_cotton',
'district_KARUR', 'district_TENKASI', 'district_MADURAI', 'district_PUDUKKOTTAI', 'district_THANJAVUR', 'district_DINDIGUL')
# Second, we use the exact method to match the data
##data_naomit <-  %>%  # MatchIt does not allow missing values (drops missing values)
##  select(lwage, college, one_of(card_cov)) %>% na.omit()
mod_match_ATE <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat, #formula: treat ~ x1+x2+...(background variables)
estimand="ATE",
method = "exact", # set the matching method you want to use
data = data)
df_mATE <- match.data(mod_match)
mod_match_ATT <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat, #formula: treat ~ x1+x2+...(background variables)
estimand="ATT",
method = "exact", # set the matching method you want to use
data = data)
df_mATT <- match.data(mod_match)
#summary(m.out, un = FALSE)
#summary(mod_match, un = FALSE)
#df_m
# Do the balance test on the two groups
#df_m %>%
#  group_by(fiona_farmer) %>%
#  select(one_of(data_cov)) %>%
#  summarise_all(funs(mean(., na.rm = T)))
# To do the balance more formally using regressions
#summary(lm(farmer_birth_year~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
###
md_ATE <- match.data(mod_match_ATE)
fit <- lm(profits_2016 ~ fiona_farmer, data = md_ATE, weights = weights)
coeftest(fit, vcov. = vcovCL, cluster = ~subclass)
md_ATE <- match.data(mod_match_ATE)
fit <- lm(profits_2016 ~ fiona_farmer, data = md_ATE, weights = weights)
coeftest(fit, vcov. = vcovCL, cluster = ~subclass)
#card_cov <- c('lwage', 'age', 'IQ')
data_cov <- c('profits_2016', 'farmer_birth_year', 'fertilizer_use', 'profits_2005', 'crop_lentils', 'crop_wheat', 'crop_rice', 'crop_cotton',
'district_KARUR', 'district_TENKASI', 'district_MADURAI', 'district_PUDUKKOTTAI', 'district_THANJAVUR', 'district_DINDIGUL')
# Second, we use the exact method to match the data
##data_naomit <-  %>%  # MatchIt does not allow missing values (drops missing values)
##  select(lwage, college, one_of(card_cov)) %>% na.omit()
mod_match_ATE <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat, #formula: treat ~ x1+x2+...(background variables)
estimand="ATE",
method = "exact", # set the matching method you want to use
data = data)
df_mATE <- match.data(mod_match)
mod_match_ATT <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat, #formula: treat ~ x1+x2+...(background variables)
estimand="ATT",
method = "exact", # set the matching method you want to use
data = data)
df_mATT <- match.data(mod_match)
#summary(m.out, un = FALSE)
#summary(mod_match, un = FALSE)
#df_m
# Do the balance test on the two groups
#df_m %>%
#  group_by(fiona_farmer) %>%
#  select(one_of(data_cov)) %>%
#  summarise_all(funs(mean(., na.rm = T)))
# To do the balance more formally using regressions
#summary(lm(farmer_birth_year~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
###
md_ATE <- match.data(mod_match_ATE)
fit <- lm(profits_2016 ~ fiona_farmer, data = md_ATE, weights = weights)
coeftest(fit, vcov. = vcovCL, cluster = ~subclass)
md_ATT <- match.data(mod_match_ATE)
fit <- lm(profits_2016 ~ fiona_farmer, data = md_ATT, weights = weights)
coeftest(fit, vcov. = vcovCL, cluster = ~subclass)
#card_cov <- c('lwage', 'age', 'IQ')
data_cov <- c('profits_2016', 'farmer_birth_year', 'fertilizer_use', 'profits_2005', 'crop_lentils', 'crop_wheat', 'crop_rice', 'crop_cotton',
'district_KARUR', 'district_TENKASI', 'district_MADURAI', 'district_PUDUKKOTTAI', 'district_THANJAVUR', 'district_DINDIGUL')
# Second, we use the exact method to match the data
##data_naomit <-  %>%  # MatchIt does not allow missing values (drops missing values)
##  select(lwage, college, one_of(card_cov)) %>% na.omit()
mod_match_ATE <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat, #formula: treat ~ x1+x2+...(background variables)
estimand="ATE",
method = "exact", # set the matching method you want to use
data = data)
df_mATE <- match.data(mod_match)
mod_match_ATT <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat, #formula: treat ~ x1+x2+...(background variables)
estimand="ATT",
method = "exact", # set the matching method you want to use
data = data)
df_mATT <- match.data(mod_match)
#summary(m.out, un = FALSE)
#summary(mod_match, un = FALSE)
#df_m
# Do the balance test on the two groups
#df_m %>%
#  group_by(fiona_farmer) %>%
#  select(one_of(data_cov)) %>%
#  summarise_all(funs(mean(., na.rm = T)))
# To do the balance more formally using regressions
#summary(lm(farmer_birth_year~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
###
md_ATE <- match.data(mod_match_ATE)
fit <- lm(profits_2016 ~ fiona_farmer, data = md_ATE, weights = weights)
coeftest(fit, vcov. = vcovCL, cluster = ~subclass)
md_ATT <- match.data(mod_match_ATT)
fit <- lm(profits_2016 ~ fiona_farmer, data = md_ATT, weights = weights)
coeftest(fit, vcov. = vcovCL, cluster = ~subclass)
data_cov <- c('profits_2016', 'farmer_birth_year', 'fertilizer_use', 'profits_2005', 'crop_lentils', 'crop_wheat', 'crop_rice', 'crop_cotton',
'district_KARUR', 'district_TENKASI', 'district_MADURAI', 'district_PUDUKKOTTAI', 'district_THANJAVUR', 'district_DINDIGUL')
mod_match_ATE <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat,
estimand="ATE",
method = "exact",
data = data)
df_mATE <- match.data(mod_match_ATE)
mod_match_ATT <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat,
estimand="ATT",
method = "exact",
data = data)
df_mATT <- match.data(mod_match_ATT)
#summary(mod_match, un = FALSE)
#df_m
# Do the balance test on the two groups
#df_m %>%
#  group_by(fiona_farmer) %>%
#  select(one_of(data_cov)) %>%
#  summarise_all(funs(mean(., na.rm = T)))
# To do the balance more formally using regressions
#summary(lm(farmer_birth_year~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
###
md_ATE <- match.data(mod_match_ATE)
fit <- lm(profits_2016 ~ fiona_farmer, data = md_ATE, weights = weights)
coeftest(fit, vcov. = vcovCL, cluster = ~subclass)
md_ATT <- match.data(mod_match_ATT)
fit <- lm(profits_2016 ~ fiona_farmer, data = md_ATT, weights = weights)
coeftest(fit, vcov. = vcovCL, cluster = ~subclass)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
library(readr)
library(stargazer)
library(MatchIt)
library(broom)      # tidy function: statistical outputs into tibbles
library(kableExtra) # make-up tables
library(lmtest)
library(sandwich)
library(AER)
data<-read.csv("ps3_data.csv")
summary(lm(groundwater_cost ~ electricity_price_pilot, data = data))
summary(lm(groundwater_use ~ electricity_price_pilot, data = subset(data, iou==1))
summary(lm(groundwater_use ~ electricity_price_pilot, data = subset(data, iou==1)))
summary(lm(groundwater_use ~ electricity_price_pilot, data = subset(data, iou==1)))
summary(lm(groundwater_use ~ electricity_price_pilot, data = subset(data, iou==2)))
summary(lm(groundwater_use ~ electricity_price_pilot, data = subset(data, iou==1)))
summary(lm(groundwater_use ~ electricity_price_pilot, data = subset(data, iou==2)))
summary(lm(groundwater_use ~ electricity_price_pilot, data = subset(data, iou==1)))
summary(lm(groundwater_use ~ electricity_price_pilot, data = subset(data, iou==2)))
summary(lm(electricity_price_pilot ~ survey_price, data = subset(data, iou==2)))
#summary(lm(electricity_price_pilot ~ survey_price, data = subset(data, iou==2)))
iv_reg <- ivreg(groundwater_use_v2 ~ electricity_price_pilot | survey_price, data = subset(data, iou==2)
summary(iv_reg)
#summary(lm(electricity_price_pilot ~ survey_price, data = subset(data, iou==2)))
iv_reg <- ivreg(groundwater_use_v2 ~ electricity_price_pilot | survey_price, data = subset(data, iou==2))
summary(iv_reg)
knitr::opts_chunk$set(echo = TRUE)
# Read in the original csv from the UN data portal
worker_retiree_ratio <- read.csv("20_64_and_65plus_population_UN.csv")
setwd("~/Documents/UChicago/Courses/CAPP 30239 Data Visualization/Final Project/Datasets")
# Read in the original csv from the UN data portal
worker_retiree_ratio <- read.csv("20_64_and_65plus_population_UN.csv")
# Remove unnecessary columns
worker_retiree_ratio<- worker_retiree_ratio[c(8, 12, 20, 27)]
# Rename columns
colnames(worker_retiree_ratio) <- c('country','year','age_range','population')
# Remove rows that are not countries  myData[-c(2, 4, 6), ]
#worker_retiree_ratio[-c(21477:26026, 47139:51324), ]
worker_retiree_ratio <- worker_retiree_ratio[-(21477:25662), ]
worker_retiree_ratio <- worker_retiree_ratio[-(42953:47138), ]
View(worker_retiree_ratio)
# filter(pres_results, state == "CA")
filter(worker_retiree_ratio, year == "1990", "2020", "2050")
# filter(pres_results, state == "CA")
worker_retiree_ratio_test <- filter(worker_retiree_ratio, year == 1990 )
# filter(pres_results, state == "CA")
worker_retiree_ratio_test <- filter(worker_retiree_ratio, 'year' == 1990 )
# Read in the original csv from the UN data portal
worker_retiree_ratio <- read.csv("20_64_and_65plus_population_UN.csv")
# Remove unnecessary columns
worker_retiree_ratio<- worker_retiree_ratio[c(8, 12, 20, 27)]
# Rename columns
colnames(worker_retiree_ratio) <- c('country','year','age_range','population')
# Remove rows that are not countries  myData[-c(2, 4, 6), ]
#worker_retiree_ratio[-c(21477:26026, 47139:51324), ]
worker_retiree_ratio <- worker_retiree_ratio[-(21477:25662), ]
worker_retiree_ratio <- worker_retiree_ratio[-(42953:47138), ]
# filter(starwars, hair_color == "none" | eye_color == "black")
filter(worker_retiree_ratio, 'year' == 1990 | 'year' == 2020 | 'year'== 2050 )
# filter(starwars, hair_color == "none" | eye_color == "black")
filter(worker_retiree_ratio, year == 1990 | year == 2020 | year== 2050 )
# Rename columns
colnames(worker_retiree_ratio) <- c(country,year,age_range,population)
# Rename columns
colnames(worker_retiree_ratio) <- c('country','year','age_range','population')
# filter(starwars, hair_color == "none" | eye_color == "black")
# filter(worker_retiree_ratio, year == 1990 | year == 2020 | year== 2050 )
# data[data$x1 != 2 & data$x2 != "e", ]
worker_retiree_ratio[worker_retiree_ratio$year != 1990 | worker_retiree_ratio$year != "2020" | worker_retiree_ratio$year != "2050", ]
# filter(starwars, hair_color == "none" | eye_color == "black")
# filter(worker_retiree_ratio, year == 1990 | year == 2020 | year== 2050 )
# data[data$x1 != 2 & data$x2 != "e", ]
worker_retiree_ratio[worker_retiree_ratio$year != "1990" | worker_retiree_ratio$year != "2020" | worker_retiree_ratio$year != "2050", ]
# filter(starwars, hair_color == "none" | eye_color == "black")
# filter(worker_retiree_ratio, year == 1990 | year == 2020 | year== 2050 )
# data[data$x1 != 2 & data$x2 != "e", ]
worker_retiree_ratio[worker_retiree_ratio$year != 1990 | worker_retiree_ratio$year != 2020 | worker_retiree_ratio$year != 2050, ]
# filter(starwars, hair_color == "none" | eye_color == "black")
# filter(worker_retiree_ratio, year == 1990 | year == 2020 | year== 2050 )
# data[data$x1 != 2 & data$x2 != "e", ]
worker_retiree_ratio[worker_retiree_ratio$year != 1990, ] #| worker_retiree_ratio$year != 2020 | worker_retiree_ratio$year != 2050, ]
# filter(starwars, hair_color == "none" | eye_color == "black")
# filter(worker_retiree_ratio, year == 1990 | year == 2020 | year== 2050 )
# data[data$x1 != 2 & data$x2 != "e", ]
worker_retiree_ratio[worker_retiree_ratio$year == 1990 | worker_retiree_ratio$year == 2020 | worker_retiree_ratio$year == 2050, ]
# filter(starwars, hair_color == "none" | eye_color == "black")
# filter(worker_retiree_ratio, year == 1990 | year == 2020 | year== 2050 )
# data[data$x1 != 2 & data$x2 != "e", ]
test <- worker_retiree_ratio[worker_retiree_ratio$year == 1990 | worker_retiree_ratio$year == 2020 | worker_retiree_ratio$year == 2050, ]
# data[data$x1 != 2 & data$x2 != "e", ]
test <- worker_retiree_ratio[worker_retiree_ratio$year == 1990 | worker_retiree_ratio$year == 2020 | worker_retiree_ratio$year == 2050, ]
test_2 <- test[test$country == "United states of America", ]
View(test_2)
# data[data$x1 != 2 & data$x2 != "e", ]
test <- worker_retiree_ratio[worker_retiree_ratio$year == 1990 | worker_retiree_ratio$year == 2020 | worker_retiree_ratio$year == 2050, ]
test_2 <- test[test$country == "United States of America", ]
View(test_2)
# data[data$x1 != 2 & data$x2 != "e", ]
test <- worker_retiree_ratio[worker_retiree_ratio$year == 1990 | worker_retiree_ratio$year == 2020 | worker_retiree_ratio$year == 2050, ]
test_2 <- test[test$country == "United States of America" | test$country == "China"
| test$country == "Japan" | test$country == "Germany" |
test$country == "India" | test$country == "United Kingdom" |
test$country == "France" | test$country == "Brazil" |
test$country == "Italy" | test$country == "Canada" |
test$country == "Russian Federation" | test$country == "Dem. People's Rep. of Korea" |
test$country == "Australia", ]
View(test_2)
# Remove duplicate 2050 rows
test_3 <- test_2[-(4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64,
# Remove duplicate 2050 rows
test_3 <- test_2[-c(4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64,
68, 72, 76, 80, 84, 88, 92, 96, 100, 104), ]
View(test_3)
write.csv(test_3, "worker_ratio_phase1_v1.csv", row.names=FALSE, quote=FALSE)
fertility_rate <- read.csv("country_fertility_rate_OECD.csv")
View(fertility_rate)
# Remove unnecessary columns
fertility_rate <- fertility_rate[c(1, 6, 7)]
# Rename columns
colnames(fertility_rate) <- c('country','year','fertility_rate')
fertility_rate <- read.csv("country_fertility_rate_OECD.csv")
# Remove unnecessary columns
fertility_rate <- fertility_rate[c(1, 6, 7)]
# Rename columns
colnames(fertility_rate) <- c('country','year','fertility_rate')
# Remove all rows that are not years 1970 or 2020
fertility_rate <- fertility_rate[fertility_rate$year == 1970 |
fertility_rate$year == 2020, ]
write.csv(fertility_rate, "fertility_rate_cleaned_v1.csv", row.names=FALSE, quote=FALSE)
pension_cost <- read.csv("gov_pension_costs_OECD.csv")
View(pension_cost)
# Remove unnecessary columns
pension_cost <- pension_cost[c(1, 6, 7)]
# Rename columns
colnames(pension_cost) <- c('country','year','percent_of_gdp')
# Remove all countrys that are not in the top 13 by GDP (China, India, Brazil Not in Data)
pension_cost<- pension_cost[pension_cost$country == "USA" |
| pension_cost$country == "JPN" |
# Remove all countrys that are not in the top 13 by GDP (China, India, Brazil Not in Data)
pension_cost<- pension_cost[pension_cost$country == "USA" |
pension_cost$country == "JPN" |
pension_cost$country == "GBR" | pension_cost$country == "DEU" |
pension_cost$country == "FRA" |
pension_cost$country == "ITA" | pension_cost$country == "CAN" |
pension_cost$country == "RUS" | pension_cost$country == "KOR" |
pension_cost$country == "AUS", ]
write.csv(pension_cost, "pension_costs_cleaned_v1.csv", row.names=FALSE, quote=FALSE)
