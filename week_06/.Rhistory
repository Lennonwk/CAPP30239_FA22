#df_m %>%
#  group_by(fiona_farmer) %>%
#  select(one_of(data_cov)) %>%
#  summarise_all(funs(mean(., na.rm = T)))
# To do the balance more formally using regressions
summary(lm(farmer_birth_year~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
#card_cov <- c('lwage', 'age', 'IQ')
data_cov <- c('profits_2016', 'farmer_birth_year', 'fertilizer_use', 'profits_2005', 'crop_lentils', 'crop_wheat', 'crop_rice', 'crop_cotton',
'district_KARUR', 'district_TENKASI', 'district_MADURAI', 'district_PUDUKKOTTAI', 'district_THANJAVUR', 'district_DINDIGUL')
# Second, we use the exact method to match the data
##data_naomit <-  %>%  # MatchIt does not allow missing values (drops missing values)
##  select(lwage, college, one_of(card_cov)) %>% na.omit()
mod_match <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat, #formula: treat ~ x1+x2+...(background variables)
estimand="ATE",
method = "exact", # set the matching method you want to use
data = data)
df_m <- match.data(mod_match)
mod_match
#df_m
# Do the balance test on the two groups
#df_m %>%
#  group_by(fiona_farmer) %>%
#  select(one_of(data_cov)) %>%
#  summarise_all(funs(mean(., na.rm = T)))
# To do the balance more formally using regressions
#summary(lm(farmer_birth_year~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
#card_cov <- c('lwage', 'age', 'IQ')
data_cov <- c('profits_2016', 'farmer_birth_year', 'fertilizer_use', 'profits_2005', 'crop_lentils', 'crop_wheat', 'crop_rice', 'crop_cotton',
'district_KARUR', 'district_TENKASI', 'district_MADURAI', 'district_PUDUKKOTTAI', 'district_THANJAVUR', 'district_DINDIGUL')
# Second, we use the exact method to match the data
##data_naomit <-  %>%  # MatchIt does not allow missing values (drops missing values)
##  select(lwage, college, one_of(card_cov)) %>% na.omit()
mod_match <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat, #formula: treat ~ x1+x2+...(background variables)
estimand="ATE",
method = "exact", # set the matching method you want to use
data = data)
df_mATE <- match.data(mod_match)
mod_match <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat, #formula: treat ~ x1+x2+...(background variables)
estimand="ATT",
method = "exact", # set the matching method you want to use
data = data)
df_mATT <- match.data(mod_match)
mod_match
#df_m
# Do the balance test on the two groups
#df_m %>%
#  group_by(fiona_farmer) %>%
#  select(one_of(data_cov)) %>%
#  summarise_all(funs(mean(., na.rm = T)))
# To do the balance more formally using regressions
#summary(lm(farmer_birth_year~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
data<-read.csv("ps2_data.csv")
data$farmer_birth_year[data$farmer_birth_year == 'nineteen seventy-three'] <- '1973'
data$farmer_birth_year[data$farmer_birth_year == 'nineteen seventy-two'] <- '1972'
data$farmer_birth_year <- as.numeric(data$farmer_birth_year)
data$crop_lentils <- ifelse(data$crop=='LENTILS',1,0)
data$crop_wheat <- ifelse(data$crop=='WHEAT',1,0)
data$crop_rice <- ifelse(data$crop=='RICE',1,0)
data$crop_cotton <- ifelse(data$crop=='COTTON',1,0)
data$district_KARUR <- ifelse(data$district=='KARUR',1,0)
data$district_TENKASI <- ifelse(data$district=='TENKASI',1,0)
data$district_MADURAI <- ifelse(data$district=='MADURAI',1,0)
data$district_PUDUKKOTTAI <- ifelse(data$district=='PUDUKKOTTAI',1,0)
data$district_THANJAVUR <- ifelse(data$district=='THANJAVUR',1,0)
data$district_DINDIGUL <- ifelse(data$district=='DINDIGUL',1,0)
regressions <- data %>%
select("farmer_birth_year",
"fertilizer_use",
"profits_2005",
"crop_lentils",
"crop_wheat",
"crop_rice",
"crop_cotton",
"district_KARUR",
"district_TENKASI",
"district_MADURAI",
"district_PUDUKKOTTAI",
"district_THANJAVUR",
"district_DINDIGUL") %>%
lapply(function(x) lm(x ~ fiona_farmer, data = data))
balance_table <- regressions %>%
sapply(function(x) coef(summary(x))[c(2,8)]) %>%
t()
balance_table %>%
kable(col.names = c("Differences in means", "p-value")) %>%
kable_styling(position = "center", font_size = 8.5, latex_options = "hold_position")
#summary(df_data_lab)
lm <- lm(profits_2016 ~ fiona_farmer + profits_2005 + crop_lentils +
crop_wheat + crop_rice + crop_cotton,  data = data)
### Report LM
lm %>%
tidy() %>%
kable(caption = "Regression Output",
col.names = c("Predictor", "Beta", "SE", "t", "p"),
booktabs = TRUE) %>%
kable_styling(latex_options = "HOLD_position")
lm <- lm(profits_2016 ~ fiona_farmer + profits_2005 + crop_lentils +
crop_wheat + crop_cotton + crop_rice ,  data = data)
### Report LM
lm %>%
tidy() %>%
kable(caption = "Regression Output",
col.names = c("Predictor", "Beta", "SE", "t", "p"),
booktabs = TRUE) %>%
kable_styling(latex_options = "HOLD_position")
lm <- lm(profits_2016 ~ fiona_farmer + profits_2005 + crop_lentils +
crop_wheat + crop_cotton + crop_rice   data = data)
lm <- lm(profits_2016 ~ fiona_farmer + profits_2005 + crop_lentils +
crop_wheat + crop_cotton + crop_rice,   data = data)
### Report LM
lm %>%
tidy() %>%
kable(caption = "Regression Output",
col.names = c("Predictor", "Beta", "SE", "t", "p"),
booktabs = TRUE) %>%
kable_styling(latex_options = "HOLD_position")
### Report LM
lm %>%
tidy() %>%
kable(caption = "Regression Output",
col.names = c("Predictor", "Beta", "SE", "t", "p"),
booktabs = FALSE) %>%
kable_styling(latex_options = "HOLD_position")
lm <- lm(profits_2016 ~ fiona_farmer + profits_2005 + crop_lentils +
crop_wheat + crop_cotton,   data = data)
### Report LM
lm %>%
tidy() %>%
kable(caption = "Regression Output",
col.names = c("Predictor", "Beta", "SE", "t", "p"),
booktabs = FALSE) %>%
kable_styling(latex_options = "HOLD_position")
### Report LM
lm %>%
tidy() %>%
kable(caption = "Regression Output",
col.names = c("Predictor", "Beta", "SE", "t", "p"),
booktabs = FALSE) %>%
kable_styling(latex_options = "HOLD_position")
lm <- lm(profits_2016 ~ fiona_farmer + profits_2005 + crop_lentils +
crop_wheat + crop_cotton + crop_rice,   data = data)
### Report LM
lm %>%
tidy() %>%
kable(caption = "Regression Output",
col.names = c("Predictor", "Beta", "SE", "t", "p"),
booktabs = FALSE) %>%
kable_styling(latex_options = "HOLD_position")
Y_treated_avg  = mean(data$profits_2016 [data$fiona_farmer==1])
Y_untreated_avg  = mean(data$profits_2016 [data$fiona_farmer==0])
naive_estimator = Y_treated_avg - Y_untreated_avg
naive_estimator
library(tidyverse)
library(knitr)
library(readr)
library(stargazer)
library(MatchIt)
library(broom)      # tidy function: statistical outputs into tibbles
library(kableExtra) # make-up tables
data<-read.csv("ps2_data.csv")
data$farmer_birth_year[data$farmer_birth_year == 'nineteen seventy-three'] <- '1973'
data$farmer_birth_year[data$farmer_birth_year == 'nineteen seventy-two'] <- '1972'
data$farmer_birth_year <- as.numeric(data$farmer_birth_year)
data$crop_lentils <- ifelse(data$crop=='LENTILS',1,0)
data$crop_wheat <- ifelse(data$crop=='WHEAT',1,0)
data$crop_rice <- ifelse(data$crop=='RICE',1,0)
data$crop_cotton <- ifelse(data$crop=='COTTON',1,0)
data$district_KARUR <- ifelse(data$district=='KARUR',1,0)
data$district_TENKASI <- ifelse(data$district=='TENKASI',1,0)
data$district_MADURAI <- ifelse(data$district=='MADURAI',1,0)
data$district_PUDUKKOTTAI <- ifelse(data$district=='PUDUKKOTTAI',1,0)
data$district_THANJAVUR <- ifelse(data$district=='THANJAVUR',1,0)
data$district_DINDIGUL <- ifelse(data$district=='DINDIGUL',1,0)
regressions <- data %>%
select("farmer_birth_year",
"fertilizer_use",
"profits_2005",
"crop_lentils",
"crop_wheat",
"crop_rice",
"crop_cotton",
"district_KARUR",
"district_TENKASI",
"district_MADURAI",
"district_PUDUKKOTTAI",
"district_THANJAVUR",
"district_DINDIGUL") %>%
lapply(function(x) lm(x ~ fiona_farmer, data = data))
balance_table <- regressions %>%
sapply(function(x) coef(summary(x))[c(2,8)]) %>%
t()
balance_table %>%
kable(col.names = c("Differences in means", "p-value")) %>%
kable_styling(position = "center", font_size = 8.5, latex_options = "hold_position")
#summary(df_data_lab)
lm <- lm(profits_2016 ~ fiona_farmer + profits_2005 + crop_lentils +
crop_wheat + crop_cotton + crop_rice,   data = data)
### Report LM
lm %>%
tidy() %>%
kable(caption = "Regression Output",
col.names = c("Predictor", "Beta", "SE", "t", "p"),
booktabs = FALSE) %>%
kable_styling(latex_options = "HOLD_position")
Y_treated_avg  = mean(data$profits_2016 [data$fiona_farmer==1])
Y_untreated_avg  = mean(data$profits_2016 [data$fiona_farmer==0])
naive_estimator = Y_treated_avg - Y_untreated_avg
naive_estimator
#card_cov <- c('lwage', 'age', 'IQ')
data_cov <- c('profits_2016', 'farmer_birth_year', 'fertilizer_use', 'profits_2005', 'crop_lentils', 'crop_wheat', 'crop_rice', 'crop_cotton',
'district_KARUR', 'district_TENKASI', 'district_MADURAI', 'district_PUDUKKOTTAI', 'district_THANJAVUR', 'district_DINDIGUL')
# Second, we use the exact method to match the data
##data_naomit <-  %>%  # MatchIt does not allow missing values (drops missing values)
##  select(lwage, college, one_of(card_cov)) %>% na.omit()
mod_match <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat, #formula: treat ~ x1+x2+...(background variables)
estimand="ATE",
method = "exact", # set the matching method you want to use
data = data)
df_mATE <- match.data(mod_match)
mod_match <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat, #formula: treat ~ x1+x2+...(background variables)
estimand="ATT",
method = "exact", # set the matching method you want to use
data = data)
df_mATT <- match.data(mod_match)
mod_match
#df_m
# Do the balance test on the two groups
#df_m %>%
#  group_by(fiona_farmer) %>%
#  select(one_of(data_cov)) %>%
#  summarise_all(funs(mean(., na.rm = T)))
# To do the balance more formally using regressions
#summary(lm(farmer_birth_year~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
#card_cov <- c('lwage', 'age', 'IQ')
data_cov <- c('profits_2016', 'farmer_birth_year', 'fertilizer_use', 'profits_2005', 'crop_lentils', 'crop_wheat', 'crop_rice', 'crop_cotton',
'district_KARUR', 'district_TENKASI', 'district_MADURAI', 'district_PUDUKKOTTAI', 'district_THANJAVUR', 'district_DINDIGUL')
# Second, we use the exact method to match the data
##data_naomit <-  %>%  # MatchIt does not allow missing values (drops missing values)
##  select(lwage, college, one_of(card_cov)) %>% na.omit()
mod_match <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat, #formula: treat ~ x1+x2+...(background variables)
estimand="ATE",
method = "exact", # set the matching method you want to use
data = data)
df_mATE <- match.data(mod_match)
mod_match <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat, #formula: treat ~ x1+x2+...(background variables)
estimand="ATT",
method = "exact", # set the matching method you want to use
data = data)
df_mATT <- match.data(mod_match)
#summary(m.out, un = FALSE)
summary(mod_match, un = FALSE)
#df_m
# Do the balance test on the two groups
#df_m %>%
#  group_by(fiona_farmer) %>%
#  select(one_of(data_cov)) %>%
#  summarise_all(funs(mean(., na.rm = T)))
# To do the balance more formally using regressions
#summary(lm(farmer_birth_year~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
library(tidyverse)
library(knitr)
library(readr)
library(stargazer)
library(MatchIt)
library(broom)      # tidy function: statistical outputs into tibbles
library(kableExtra) # make-up tables
library(lmtest)
library(sandwich)
library(tidyverse)
library(knitr)
library(readr)
library(stargazer)
library(MatchIt)
library(broom)      # tidy function: statistical outputs into tibbles
library(kableExtra) # make-up tables
library(lmtest)
library(sandwich)
#card_cov <- c('lwage', 'age', 'IQ')
data_cov <- c('profits_2016', 'farmer_birth_year', 'fertilizer_use', 'profits_2005', 'crop_lentils', 'crop_wheat', 'crop_rice', 'crop_cotton',
'district_KARUR', 'district_TENKASI', 'district_MADURAI', 'district_PUDUKKOTTAI', 'district_THANJAVUR', 'district_DINDIGUL')
# Second, we use the exact method to match the data
##data_naomit <-  %>%  # MatchIt does not allow missing values (drops missing values)
##  select(lwage, college, one_of(card_cov)) %>% na.omit()
mod_match <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat, #formula: treat ~ x1+x2+...(background variables)
estimand="ATE",
method = "exact", # set the matching method you want to use
data = data)
df_mATE <- match.data(mod_match)
mod_match <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat, #formula: treat ~ x1+x2+...(background variables)
estimand="ATT",
method = "exact", # set the matching method you want to use
data = data)
df_mATT <- match.data(mod_match)
#summary(m.out, un = FALSE)
summary(mod_match, un = FALSE)
#df_m
# Do the balance test on the two groups
#df_m %>%
#  group_by(fiona_farmer) %>%
#  select(one_of(data_cov)) %>%
#  summarise_all(funs(mean(., na.rm = T)))
# To do the balance more formally using regressions
#summary(lm(farmer_birth_year~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
###
library("lmtest")
library("sandwich")
md <- match.data(mod_match)
fit <- lm(profits_2016 ~ fiona_farmer, data = md, weights = weights)
coeftest(fit, vcov. = vcovCL, cluster = ~subclass)
#card_cov <- c('lwage', 'age', 'IQ')
data_cov <- c('profits_2016', 'farmer_birth_year', 'fertilizer_use', 'profits_2005', 'crop_lentils', 'crop_wheat', 'crop_rice', 'crop_cotton',
'district_KARUR', 'district_TENKASI', 'district_MADURAI', 'district_PUDUKKOTTAI', 'district_THANJAVUR', 'district_DINDIGUL')
# Second, we use the exact method to match the data
##data_naomit <-  %>%  # MatchIt does not allow missing values (drops missing values)
##  select(lwage, college, one_of(card_cov)) %>% na.omit()
mod_match_ATE <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat, #formula: treat ~ x1+x2+...(background variables)
estimand="ATE",
method = "exact", # set the matching method you want to use
data = data)
df_mATE <- match.data(mod_match)
mod_match_ATT <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat, #formula: treat ~ x1+x2+...(background variables)
estimand="ATT",
method = "exact", # set the matching method you want to use
data = data)
df_mATT <- match.data(mod_match)
#summary(m.out, un = FALSE)
#summary(mod_match, un = FALSE)
#df_m
# Do the balance test on the two groups
#df_m %>%
#  group_by(fiona_farmer) %>%
#  select(one_of(data_cov)) %>%
#  summarise_all(funs(mean(., na.rm = T)))
# To do the balance more formally using regressions
#summary(lm(farmer_birth_year~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
###
md_ATE <- match.data(mod_match_ATE)
fit <- lm(profits_2016 ~ fiona_farmer, data = md_ATE, weights = weights)
coeftest(fit, vcov. = vcovCL, cluster = ~subclass)
md_ATE <- match.data(mod_match_ATE)
fit <- lm(profits_2016 ~ fiona_farmer, data = md_ATE, weights = weights)
coeftest(fit, vcov. = vcovCL, cluster = ~subclass)
#card_cov <- c('lwage', 'age', 'IQ')
data_cov <- c('profits_2016', 'farmer_birth_year', 'fertilizer_use', 'profits_2005', 'crop_lentils', 'crop_wheat', 'crop_rice', 'crop_cotton',
'district_KARUR', 'district_TENKASI', 'district_MADURAI', 'district_PUDUKKOTTAI', 'district_THANJAVUR', 'district_DINDIGUL')
# Second, we use the exact method to match the data
##data_naomit <-  %>%  # MatchIt does not allow missing values (drops missing values)
##  select(lwage, college, one_of(card_cov)) %>% na.omit()
mod_match_ATE <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat, #formula: treat ~ x1+x2+...(background variables)
estimand="ATE",
method = "exact", # set the matching method you want to use
data = data)
df_mATE <- match.data(mod_match)
mod_match_ATT <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat, #formula: treat ~ x1+x2+...(background variables)
estimand="ATT",
method = "exact", # set the matching method you want to use
data = data)
df_mATT <- match.data(mod_match)
#summary(m.out, un = FALSE)
#summary(mod_match, un = FALSE)
#df_m
# Do the balance test on the two groups
#df_m %>%
#  group_by(fiona_farmer) %>%
#  select(one_of(data_cov)) %>%
#  summarise_all(funs(mean(., na.rm = T)))
# To do the balance more formally using regressions
#summary(lm(farmer_birth_year~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
###
md_ATE <- match.data(mod_match_ATE)
fit <- lm(profits_2016 ~ fiona_farmer, data = md_ATE, weights = weights)
coeftest(fit, vcov. = vcovCL, cluster = ~subclass)
md_ATT <- match.data(mod_match_ATE)
fit <- lm(profits_2016 ~ fiona_farmer, data = md_ATT, weights = weights)
coeftest(fit, vcov. = vcovCL, cluster = ~subclass)
#card_cov <- c('lwage', 'age', 'IQ')
data_cov <- c('profits_2016', 'farmer_birth_year', 'fertilizer_use', 'profits_2005', 'crop_lentils', 'crop_wheat', 'crop_rice', 'crop_cotton',
'district_KARUR', 'district_TENKASI', 'district_MADURAI', 'district_PUDUKKOTTAI', 'district_THANJAVUR', 'district_DINDIGUL')
# Second, we use the exact method to match the data
##data_naomit <-  %>%  # MatchIt does not allow missing values (drops missing values)
##  select(lwage, college, one_of(card_cov)) %>% na.omit()
mod_match_ATE <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat, #formula: treat ~ x1+x2+...(background variables)
estimand="ATE",
method = "exact", # set the matching method you want to use
data = data)
df_mATE <- match.data(mod_match)
mod_match_ATT <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat, #formula: treat ~ x1+x2+...(background variables)
estimand="ATT",
method = "exact", # set the matching method you want to use
data = data)
df_mATT <- match.data(mod_match)
#summary(m.out, un = FALSE)
#summary(mod_match, un = FALSE)
#df_m
# Do the balance test on the two groups
#df_m %>%
#  group_by(fiona_farmer) %>%
#  select(one_of(data_cov)) %>%
#  summarise_all(funs(mean(., na.rm = T)))
# To do the balance more formally using regressions
#summary(lm(farmer_birth_year~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
###
md_ATE <- match.data(mod_match_ATE)
fit <- lm(profits_2016 ~ fiona_farmer, data = md_ATE, weights = weights)
coeftest(fit, vcov. = vcovCL, cluster = ~subclass)
md_ATT <- match.data(mod_match_ATT)
fit <- lm(profits_2016 ~ fiona_farmer, data = md_ATT, weights = weights)
coeftest(fit, vcov. = vcovCL, cluster = ~subclass)
data_cov <- c('profits_2016', 'farmer_birth_year', 'fertilizer_use', 'profits_2005', 'crop_lentils', 'crop_wheat', 'crop_rice', 'crop_cotton',
'district_KARUR', 'district_TENKASI', 'district_MADURAI', 'district_PUDUKKOTTAI', 'district_THANJAVUR', 'district_DINDIGUL')
mod_match_ATE <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat,
estimand="ATE",
method = "exact",
data = data)
df_mATE <- match.data(mod_match_ATE)
mod_match_ATT <- matchit(fiona_farmer ~ farmer_birth_year + crop_cotton  + crop_lentils + crop_rice + crop_wheat,
estimand="ATT",
method = "exact",
data = data)
df_mATT <- match.data(mod_match_ATT)
#summary(mod_match, un = FALSE)
#df_m
# Do the balance test on the two groups
#df_m %>%
#  group_by(fiona_farmer) %>%
#  select(one_of(data_cov)) %>%
#  summarise_all(funs(mean(., na.rm = T)))
# To do the balance more formally using regressions
#summary(lm(farmer_birth_year~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
#summary(lm(profits_2005 ~ fiona_farmer, data = df_m), type='text')
###
md_ATE <- match.data(mod_match_ATE)
fit <- lm(profits_2016 ~ fiona_farmer, data = md_ATE, weights = weights)
coeftest(fit, vcov. = vcovCL, cluster = ~subclass)
md_ATT <- match.data(mod_match_ATT)
fit <- lm(profits_2016 ~ fiona_farmer, data = md_ATT, weights = weights)
coeftest(fit, vcov. = vcovCL, cluster = ~subclass)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
library(readr)
library(stargazer)
library(MatchIt)
library(broom)      # tidy function: statistical outputs into tibbles
library(kableExtra) # make-up tables
library(lmtest)
library(sandwich)
library(AER)
data<-read.csv("ps3_data.csv")
summary(lm(groundwater_cost ~ electricity_price_pilot, data = data))
summary(lm(groundwater_use ~ electricity_price_pilot, data = subset(data, iou==1))
summary(lm(groundwater_use ~ electricity_price_pilot, data = subset(data, iou==1)))
summary(lm(groundwater_use ~ electricity_price_pilot, data = subset(data, iou==1)))
summary(lm(groundwater_use ~ electricity_price_pilot, data = subset(data, iou==2)))
summary(lm(groundwater_use ~ electricity_price_pilot, data = subset(data, iou==1)))
summary(lm(groundwater_use ~ electricity_price_pilot, data = subset(data, iou==2)))
summary(lm(groundwater_use ~ electricity_price_pilot, data = subset(data, iou==1)))
summary(lm(groundwater_use ~ electricity_price_pilot, data = subset(data, iou==2)))
summary(lm(electricity_price_pilot ~ survey_price, data = subset(data, iou==2)))
#summary(lm(electricity_price_pilot ~ survey_price, data = subset(data, iou==2)))
iv_reg <- ivreg(groundwater_use_v2 ~ electricity_price_pilot | survey_price, data = subset(data, iou==2)
summary(iv_reg)
#summary(lm(electricity_price_pilot ~ survey_price, data = subset(data, iou==2)))
iv_reg <- ivreg(groundwater_use_v2 ~ electricity_price_pilot | survey_price, data = subset(data, iou==2))
summary(iv_reg)
setwd("~/Documents/UChicago/Courses/CAPP 30239 Data Visualization/CAPP30239_FA22/week_06")
knitr::opts_chunk$set(echo = TRUE)
# Read in the original json file
police_shooting_df <- read.csv("a3cleanedonly2015.json")
# Read in the original json file
police_shooting_df <- read.json("a3cleanedonly2015.json")
install.packages("rjson")
library("rjson")
# Give the input file name to the function.
#myData <- fromJSON(file="data.json")
library("rjson")
# Give the input file name to the function.
#myData <- fromJSON(file="data.json")
police_shooting_df <- fromJSON(file="a3cleanedonly2015.json")
View(police_shooting_df)
library("rjson")
# Give the input file name to the function.
#myData <- fromJSON(file="data.json")
police_shooting_data <- fromJSON(file="a3cleanedonly2015.json")
#json_data_frame <- as.data.frame(myData)
police_shooting_df <- as.data.frame(police_shooting_data)
library("rjson")
# Give the input file name to the function.
#myData <- fromJSON(file="data.json")
police_shooting_data <- fromJSON(file="a3cleanedonly2015.json")
#json_data_frame <- as.data.frame(myData)
police_shooting_df <- as.data.frame(police_shooting_data)
View(police_shooting_data)
